import React, { useContext, useState } from "react";
import store from '../redux/store';
import { createStackNavigator } from "@react-navigation/stack";

//Screens
import Explore from "../screens/Explore";
import Search from "../screens/Search";
import Browse from "../screens/Browse";
import Product from "../screens/Product";
import ProductsList from "../screens/ProductsList";
import Settings from "../screens/Settings";
import Cart from "../screens/Cart";
import Checkout from "../screens/Checkout";
import MyAccount from "../screens/MyAccount";
import OrderDetail from "../screens/OrderDetail";
import OrderComplete from "../screens/OrderComplete";
import EditAddress from "../screens/EditAddress";



// import { AuthContext } from './AuthProvider';
import Feather from 'react-native-vector-icons/Feather';
import {
  View,
  Text,
  Avatar
} from 'react-native-ui-lib';

import { StyleSheet, ActivityIndicator } from "react-native";
import Animated from 'react-native-reanimated';
import { LinearGradient } from 'expo-linear-gradient';
import {
  DrawerItem,
  createDrawerNavigator,
  DrawerContentScrollView,
} from '@react-navigation/drawer';

const Stack = createStackNavigator();
const Drawer = createDrawerNavigator();

export const AppStack = (props) => {
  const [progress, setProgress] = React.useState(new Animated.Value(0))
  const user = store.getState().User.user;
  const [ThemeColor, setThemeColor] = React.useState(store.getState().Theme.theme);
  //Subscribe to redux store
  store.subscribe(() => {
    var color = store.getState().Theme.theme;
    setThemeColor(color)
  });

  var scale = Animated.interpolate(progress, {
    inputRange: [0, 1],
    outputRange: [1, 0.8],
  });
  const borderRadius = Animated.interpolate(progress, {
    inputRange: [0, 1],
    outputRange: [0, 30],
  });
  const animatedStyle = { borderRadius, transform: [{ scale }] };

  const Screens = ({ style }) => {
    return (
      <Animated.View style={StyleSheet.flatten([styles.stack, style])}>
        <Stack.Navigator
          initialRouteName="Browse"
          headerMode="screen"
          screenOptions={{ headerShown: false }}>
          <Stack.Screen name="Browse"   >{props => <Browse {...props} />}</Stack.Screen>
          <Stack.Screen name="Settings"  >{props => <Settings {...props} />}</Stack.Screen>
          <Stack.Screen name="MyAccount"  >{props => <MyAccount {...props} />}</Stack.Screen>
          <Stack.Screen name="Explore"  >{props => <Explore {...props} />}</Stack.Screen>
          <Stack.Screen name="Search"  >{props => <Search {...props} />}</Stack.Screen>
          <Stack.Screen name="Product"  >{props => <Product {...props} />}</Stack.Screen>
          <Stack.Screen name="ProductsList"  >{props => <ProductsList {...props} />}</Stack.Screen>
          <Stack.Screen name="Cart" >{props => <Cart {...props} />}</Stack.Screen>
          <Stack.Screen name="OrderDetail" >{props => <OrderDetail {...props} />}</Stack.Screen>
          <Stack.Screen name="Checkout" >{props => <Checkout {...props} />}</Stack.Screen>
          <Stack.Screen name="OrderComplete" >{props => <OrderComplete {...props} />}</Stack.Screen>
          <Stack.Screen name="EditAddress" >{props => <EditAddress {...props} />}</Stack.Screen>
        </Stack.Navigator>
      </Animated.View>
    );
  };


  const DrawerContent = props => {
    return (
      <DrawerContentScrollView {...props} scrollEnabled={false} contentContainerStyle={{ flex: 1 }}>
        <View style={{ marginTop: '20%' }}>
          <View flex={0.4} margin={20} style={{ backgroundColor: 'transparent', justifyContent: 'flex-end' }}>
            <Avatar source={{ uri: `http://192.168.100.9:8000${user.profile_image}` }} containerStyle={{ marginBottom: 10 }} />
            <Text white text60BL>
              {user.name}
            </Text>
            <Text white text100>
              {user.email}
            </Text>
          </View>
          <View style={{ backgroundColor: 'transparent' }}>
            <DrawerItem
              label="Home"
              labelStyle={{ color: 'white', marginLeft: -20 }}
              style={styles.drawerItem, { backgroundColor: 'transparent', borderRadius: 10 }}
              onPress={() => props.navigation.navigate('Browse')}
              icon={() => <Feather name={'home'} size={20} color={'white'} />}
            />
            <DrawerItem
              label="Explore"
              labelStyle={{ color: 'white', marginLeft: -20 }}
              style={styles.drawerItem, { backgroundColor: 'transparent', borderRadius: 10 }}
              onPress={() => props.navigation.navigate('Explore')}
              icon={() => <Feather name={'compass'} size={20} color={'white'} />}
            />
            <DrawerItem
              label="My Cart"
              labelStyle={{ color: 'white', marginLeft: -20 }}
              style={styles.drawerItem, { backgroundColor: 'transparent', borderRadius: 10 }}
              onPress={() => props.navigation.navigate('Cart')}
              icon={() => <Feather name={'shopping-cart'} size={20} color={'white'} />}
            />
            <DrawerItem
              label="Profile"
              labelStyle={{ color: 'white', marginLeft: -20 }}
              style={styles.drawerItem, { backgroundColor: 'transparent', borderRadius: 10 }}
              onPress={() => props.navigation.navigate('MyAccount')}
              icon={() => <Feather name={'user'} size={20} color={'white'} />}
            />

            {/* <DrawerItem
              label="Logout"
              labelStyle={{ color: 'white', marginLeft: -20 }}
              style={styles.drawerItem, { backgroundColor: 'transparent', borderRadius: 10, marginBottom: 5 }}
              icon={() => <Feather name={'log-out'} size={20} color={'white'} />}
              onPress={() => logout()}
            /> */}
          </View>
        </View >

        {/* <View style={{ position: 'absolute', bottom: 20, left: 20 }}>
          <ToggleTheme />
        </View> */}
      </DrawerContentScrollView>
    );
  };
  return (
    <LinearGradient style={{ flex: 1, backgroundColor: ThemeColor.Bg2 }} colors={[`rgb(${ThemeColor.primary})`, 'transparent']}>
      <Drawer.Navigator
        drawerType="slide"
        overlayColor="transparent"
        drawerStyle={styles.drawerStyles}
        contentContainerStyle={{ flex: 1 }}
        drawerContentOptions={{
          activeBackgroundColor: 'transparent',
          activeTintColor: 'white',
          inactiveTintColor: 'white',
        }}
        sceneContainerStyle={{ backgroundColor: 'transparent' }}
        drawerContent={props => {
          setProgress(props.progress);
          return <DrawerContent  {...props} />;
        }}>
        <Drawer.Screen name="Screens" >
          {props => <Screens {...props} style={animatedStyle} />}
        </Drawer.Screen>
      </Drawer.Navigator>
    </LinearGradient>
  );
};
const styles = StyleSheet.create({
  stack: {
    flex: 1,
    shadowColor: '#FFF',
    shadowOffset: {
      width: 0,
      height: 8,
    },
    shadowOpacity: 0.44,
    shadowRadius: 10.32,
    overflow: 'hidden',
  },
  drawerStyles: { flex: 1, width: '50%', backgroundColor: 'transparent' },
  drawerItem: { alignItems: 'flex-start', marginVertical: 0 },
  drawerLabel: { color: 'white', marginLeft: -16 },
});